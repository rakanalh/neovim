local M = {}

function M.apply(colors, opts)
  local hl = vim.api.nvim_set_hl

  -- Treesitter highlights
  hl(0, "@attribute", { fg = colors.yellow })
  hl(0, "@boolean", { fg = colors.orange })
  hl(0, "@character", { fg = colors.green })
  hl(0, "@character.special", { fg = colors.cyan })
  hl(0, "@comment", { fg = colors.subtext1, italic = true })
  hl(0, "@conditional", { fg = colors.violet, italic = opts.styles.conditionals and opts.styles.conditionals[1] == "italic" })
  hl(0, "@constant", { fg = colors.orange })
  hl(0, "@constant.builtin", { fg = colors.orange })
  hl(0, "@constant.macro", { fg = colors.violet })
  hl(0, "@constructor", { fg = colors.yellow })
  hl(0, "@debug", { fg = colors.orange })
  hl(0, "@define", { fg = colors.violet })
  hl(0, "@exception", { fg = colors.violet })
  hl(0, "@field", { fg = colors.red })
  hl(0, "@float", { fg = colors.orange })
  hl(0, "@function", { fg = colors.blue })
  hl(0, "@function.builtin", { fg = colors.blue })
  hl(0, "@function.call", { fg = colors.blue })
  hl(0, "@function.macro", { fg = colors.violet })
  hl(0, "@include", { fg = colors.violet })
  hl(0, "@keyword", { fg = colors.violet })
  hl(0, "@keyword.function", { fg = colors.violet })
  hl(0, "@keyword.operator", { fg = colors.violet })
  hl(0, "@keyword.return", { fg = colors.violet })
  hl(0, "@label", { fg = colors.violet })
  hl(0, "@method", { fg = colors.blue })
  hl(0, "@method.call", { fg = colors.blue })
  hl(0, "@namespace", { fg = colors.yellow })
  hl(0, "@none", { fg = colors.text })
  hl(0, "@number", { fg = colors.orange })
  hl(0, "@operator", { fg = colors.text })
  hl(0, "@parameter", { fg = colors.red })
  hl(0, "@parameter.reference", { fg = colors.red })
  hl(0, "@preproc", { fg = colors.violet })
  hl(0, "@property", { fg = colors.red })
  hl(0, "@punctuation.bracket", { fg = colors.text })
  hl(0, "@punctuation.delimiter", { fg = colors.text })
  hl(0, "@punctuation.special", { fg = colors.cyan })
  hl(0, "@repeat", { fg = colors.violet })
  hl(0, "@storageclass", { fg = colors.yellow })
  hl(0, "@string", { fg = colors.green })
  hl(0, "@string.escape", { fg = colors.cyan })
  hl(0, "@string.regex", { fg = colors.cyan })
  hl(0, "@string.special", { fg = colors.cyan })
  hl(0, "@symbol", { fg = colors.red })
  hl(0, "@tag", { fg = colors.red })
  hl(0, "@tag.attribute", { fg = colors.yellow })
  hl(0, "@tag.delimiter", { fg = colors.text })
  hl(0, "@text", { fg = colors.text })
  hl(0, "@text.danger", { fg = colors.red })
  hl(0, "@text.emphasis", { fg = colors.text, italic = true })
  hl(0, "@text.environment", { fg = colors.violet })
  hl(0, "@text.environment.name", { fg = colors.yellow })
  hl(0, "@text.literal", { fg = colors.green })
  hl(0, "@text.math", { fg = colors.cyan })
  hl(0, "@text.note", { fg = colors.blue })
  hl(0, "@text.reference", { fg = colors.blue })
  hl(0, "@text.strike", { fg = colors.text, strikethrough = true })
  hl(0, "@text.strong", { fg = colors.text, bold = true })
  hl(0, "@text.title", { fg = colors.blue, bold = true })
  hl(0, "@text.todo", { fg = colors.base, bg = colors.yellow })
  hl(0, "@text.underline", { fg = colors.text, underline = true })
  hl(0, "@text.uri", { fg = colors.cyan, underline = true })
  hl(0, "@text.warning", { fg = colors.yellow })
  hl(0, "@type", { fg = colors.yellow })
  hl(0, "@type.builtin", { fg = colors.yellow })
  hl(0, "@type.definition", { fg = colors.yellow })
  hl(0, "@type.qualifier", { fg = colors.violet })
  hl(0, "@variable", { fg = colors.text })
  hl(0, "@variable.builtin", { fg = colors.red })

  -- Language specific
  -- Markdown
  hl(0, "@text.title.1.markdown", { fg = colors.blue, bold = true })
  hl(0, "@text.title.2.markdown", { fg = colors.yellow, bold = true })
  hl(0, "@text.title.3.markdown", { fg = colors.green, bold = true })
  hl(0, "@text.title.4.markdown", { fg = colors.orange, bold = true })
  hl(0, "@text.title.5.markdown", { fg = colors.violet, bold = true })
  hl(0, "@text.title.6.markdown", { fg = colors.cyan, bold = true })
end

return M